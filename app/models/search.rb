# frozen_string_literal: true

class Search
  RESERVED_SQL_WORDS = %w[
    A ABORT ABS ABSOLUTE ACCESS ACTION ADA ADD ADMIN AFTER AGGREGATE ALIAS ALL ALLOCATE ALSO ALTER ALWAYS ANALYSE ANALYZE AND ANY ARE
    ARRAY AS ASC ASENSITIVE ASSERTION ASSIGNMENT ASYMMETRIC AT ATOMIC ATTRIBUTE ATTRIBUTES AUTHORIZATION AVG BACKUP BACKWARD BEFORE
    BEGIN BERNOULLI BETWEEN BIGINT BINARY BIT BITVAR BIT_LENGTH BLOB BOOLEAN BOTH BREADTH BREAK BROWSE BULK BY C CACHE CALL CALLED
    CARDINALITY CASCADE CASCADED CASE CAST CATALOG CATALOG_NAME CEIL CEILING CHAIN CHANGE CHAR CHARACTER CHARACTERISTICS CHARACTERS
    CHARACTER_LENGTH CHARACTER_SET_CATALOG CHARACTER_SET_NAME CHARACTER_SET_SCHEMA CHAR_LENGTH CHECK CHECKED CHECKPOINT CLASS
    CLASS_ORIGIN CLOB CLOSE CLUSTER CLUSTERED COALESCE COBOL COLLATE COLLATION COLLATION_CATALOG COLLATION_NAME COLLATION_SCHEMA
    COLLECT COLUMN COLUMN_NAME COMMAND_FUNCTION COMMAND_FUNCTION_CODE COMMENT COMMIT COMMITTED COMPLETION COMPUTE CONCURRENTLY
    CONDITION CONDITION_NUMBER CONNECT CONNECTION CONNECTION_NAME CONSTRAINT CONSTRAINTS CONSTRAINT_CATALOG CONSTRAINT_NAME
    CONSTRAINT_SCHEMA CONSTRUCTOR CONTAINS CONTAINSTABLE CONTINUE CONVERSION CONVERT COPY CORR CORRESPONDING COUNT COVAR_POP
    COVAR_SAMP CREATE CREATEDB CREATEROLE CREATEUSER CROSS CSV CUBE CUME_DIST CURRENT CURRENT_DATE CURRENT_DEFAULT_TRANSFORM_GROUP
    CURRENT_PATH CURRENT_ROLE CURRENT_TIME CURRENT_TIMESTAMP CURRENT_TRANSFORM_GROUP_FOR_TYPE CURRENT_USER CURSOR CURSOR_NAME CYCLE
    DATA DATABASE DATABASES DATE DATETIME_INTERVAL_CODE DATETIME_INTERVAL_PRECISION DAY DAY_HOUR DAY_MICROSECOND DAY_MINUTE DAY_SECOND
    DBCC DEALLOCATE DEC DECIMAL DECLARE DEFAULT DEFAULTS DEFERRABLE DEFERRED DEFINED DEFINER DEGREE DELAYED DELETE DELIMITER DELIMITERS
    DENSE_RANK DENY DEPTH DEREF DERIVED DESC DESCRIBE DESCRIPTOR DESTROY DESTRUCTOR DETERMINISTIC DIAGNOSTICS DICTIONARY DISABLE
    DISCONNECT DISK DISPATCH DISTINCT DISTINCTROW DISTRIBUTED DIV DO DOMAIN DOUBLE DROP DUAL DUMMY DUMP DYNAMIC DYNAMIC_FUNCTION
    DYNAMIC_FUNCTION_CODE EACH ELEMENT ELSE ELSEIF ENABLE ENCLOSED ENCODING ENCRYPTED END END-EXEC EQUALS ERRLVL ESCAPE ESCAPED EVERY
    EXCEPT EXCEPTION EXCLUDE EXCLUDING EXCLUSIVE EXEC EXECUTE EXISTING EXISTS EXIT EXP EXPLAIN EXTERNAL EXTRACT FALSE FETCH FILE FILLFACTOR
    FILTER FINAL FIRST FLOAT FLOAT4 FLOAT8 FLOOR FOLLOWING FOR FORCE FOREIGN FORTRAN FORWARD FOUND FREE FREETEXT FREETEXTTABLE FREEZE
    FROM FULL FULLTEXT FUNCTION FUSION G GENERAL GENERATED GET GLOBAL GO GOTO GRANT GRANTED GREATEST GROUP GROUPING HANDLER HAVING
    HEADER HIERARCHY HIGH_PRIORITY HOLD HOLDLOCK HOST HOUR HOUR_MICROSECOND HOUR_MINUTE HOUR_SECOND IDENTITY IDENTITYCOL IDENTITY_INSERT
    IF IGNORE ILIKE IMMEDIATE IMMUTABLE IMPLEMENTATION IMPLICIT IN INCLUDE INCLUDING INCREMENT INDEX INDEXES INDICATOR INFILE INFIX
    INHERIT INHERITS INITIALIZE INITIALLY INNER INOUT INPUT INSENSITIVE INSERT INSTANCE INSTANTIABLE INSTEAD INT INT1 INT2 INT3 INT4
    INT8 INTEGER INTERSECT INTERSECTION INTERVAL INTO INVOKER IS ISNULL ISOLATION ITERATE JOIN K KEY KEYS KEY_MEMBER KEY_TYPE KILL
    LANCOMPILER LANGUAGE LARGE LAST LATERAL LEADING LEAST LEAVE LEFT LENGTH LESS LEVEL LIKE LIMIT LINENO LINES LISTEN LN LOAD LOCAL
    LOCALTIME LOCALTIMESTAMP LOCATION LOCATOR LOCK LOGIN LONG LONGBLOB LONGTEXT LOOP LOWER LOW_PRIORITY M MAP MATCH MATCHED MAX MAXVALUE
    MEDIUMBLOB MEDIUMINT MEDIUMTEXT MEMBER MERGE MESSAGE_LENGTH MESSAGE_OCTET_LENGTH MESSAGE_TEXT METHOD MIDDLEINT MIN MINUTE
    MINUTE_MICROSECOND MINUTE_SECOND MINVALUE MOD MODE MODIFIES MODIFY MODULE MONTH MORE MOVE MULTISET MUMPS NAME NAMES NATIONAL NATURAL
    NCHAR NCLOB NESTING NEW NEXT NO NOCHECK NOCREATEDB NOCREATEROLE NOCREATEUSER NOINHERIT NOLOGIN NONCLUSTERED NONE NORMALIZE NORMALIZED
    NOSUPERUSER NOT NOTHING NOTIFY NOTNULL NOWAIT NO_WRITE_TO_BINLOG NULL NULLABLE NULLIF NULLS NUMBER NUMERIC OBJECT OCTETS OCTET_LENGTH
    OF OFF OFFSET OFFSETS OIDS OLD ON ONLY OPEN OPENDATASOURCE OPENQUERY OPENROWSET OPENXML OPERATION OPERATOR OPTIMIZE OPTION OPTIONALLY
    OPTIONS OR ORDER ORDERING ORDINALITY OTHERS OUT OUTER OUTFILE OUTPUT OVER OVERLAPS OVERLAY OVERRIDING OWNED OWNER PAD PARAMETER
    PARAMETERS PARAMETER_MODE PARAMETER_NAME PARAMETER_ORDINAL_POSITION PARAMETER_SPECIFIC_CATALOG PARAMETER_SPECIFIC_NAME
    PARAMETER_SPECIFIC_SCHEMA PARTIAL PARTITION PASCAL PASSWORD PATH PERCENT PERCENTILE_CONT PERCENTILE_DISC PERCENT_RANK PLACING PLAN PLI
    POSITION POSTFIX POWER PRECEDING PRECISION PREFIX PREORDER PREPARE PREPARED PRESERVE PRIMARY PRINT PRIOR PRIVILEGES PROC PROCEDURAL
    PROCEDURE PUBLIC PURGE QUOTE RAID0 RAISERROR RANGE RANK READ READS READTEXT REAL REASSIGN RECHECK RECONFIGURE RECURSIVE REF REFERENCES
    REFERENCING REGEXP REGR_AVGX REGR_AVGY REGR_COUNT REGR_INTERCEPT REGR_R2 REGR_SLOPE REGR_SXX REGR_SXY REGR_SYY REINDEX RELATIVE RELEASE
    RENAME REPEAT REPEATABLE REPLACE REPLICATION REQUIRE RESET RESIGNAL RESTART RESTORE RESTRICT RESULT RETURN RETURNED_CARDINALITY
    RETURNED_LENGTH RETURNED_OCTET_LENGTH RETURNED_SQLSTATE RETURNING RETURNS REVOKE RIGHT RLIKE ROLE ROLLBACK ROLLUP ROUTINE
    ROUTINE_CATALOG ROUTINE_NAME ROUTINE_SCHEMA ROW ROWCOUNT ROWGUIDCOL ROWS ROW_COUNT ROW_NUMBER RULE SAVE SAVEPOINT SCALE SCHEMA SCHEMAS
    SCHEMA_NAME SCOPE SCOPE_CATALOG SCOPE_NAME SCOPE_SCHEMA SCROLL SEARCH SECOND SECOND_MICROSECOND SECTION SECURITY SELECT SELF SENSITIVE
    SEPARATOR SEQUENCE SERIALIZABLE SERVER_NAME SESSION SESSION_USER SET SETOF SETS SETUSER SHARE SHOW SHUTDOWN SIGNAL SIMILAR SIMPLE SIZE
    SMALLINT SOME SONAME SOURCE SPACE SPATIAL SPECIFIC SPECIFICTYPE SPECIFIC_NAME SQL SQLCA SQLCODE SQLERROR SQLEXCEPTION SQLSTATE
    SQLWARNING SQL_BIG_RESULT SQL_CALC_FOUND_ROWS SQL_SMALL_RESULT SQRT SSL STABLE START STARTING STATE STATEMENT STATIC STATISTICS
    STDDEV_POP STDDEV_SAMP STDIN STDOUT STORAGE STRAIGHT_JOIN STRICT STRUCTURE STYLE SUBCLASS_ORIGIN SUBLIST SUBMULTISET SUBSTRING SUM
    SUPERUSER SYMMETRIC SYSID SYSTEM SYSTEM_USER TABLE TABLESAMPLE TABLESPACE TABLE_NAME TEMP TEMPLATE TEMPORARY TERMINATE TERMINATED
    TEXTSIZE THAN THEN TIES TIME TIMESTAMP TIMEZONE_HOUR TIMEZONE_MINUTE TINYBLOB TINYINT TINYTEXT TO TOP TOP_LEVEL_COUNT TRAILING TRAN
    TRANSACTION TRANSACTIONS_COMMITTED TRANSACTIONS_ROLLED_BACK TRANSACTION_ACTIVE TRANSFORM TRANSFORMS TRANSLATE TRANSLATION TREAT TRIGGER
    TRIGGER_CATALOG TRIGGER_NAME TRIGGER_SCHEMA TRIM TRUE TRUNCATE TRUSTED TSEQUAL TYPE UESCAPE UNBOUNDED UNCOMMITTED UNDER UNDO UNENCRYPTED
    UNION UNIQUE UNKNOWN UNLISTEN UNLOCK UNNAMED UNNEST UNSIGNED UNTIL UPDATE UPDATETEXT UPPER USAGE USE USER USER_DEFINED_TYPE_CATALOG
    USER_DEFINED_TYPE_CODE USER_DEFINED_TYPE_NAME USER_DEFINED_TYPE_SCHEMA USING UTC_DATE UTC_TIME UTC_TIMESTAMP VACUUM VALID VALIDATOR
    VALUE VALUES VARBINARY VARCHAR VARCHARACTER VARIABLE VARYING VAR_POP VAR_SAMP VERBOSE VIEW VOLATILE WAITFOR WHEN WHENEVER WHERE WHILE
    WIDTH_BUCKET WINDOW WITH WITHIN WITHOUT WORK WRITE WRITETEXT X509 XOR YEAR YEAR_MONTH ZEROFILL ZONE
  ].freeze

  # keep only letters in search string
  # replace anything else with a whitespace
  # return an array with the string split by whitespace
  def self.keep_only_letters(search_string)
    search_string.gsub(/[^A-Za-z]/, ' ').split(' ')
  end

  # don't let reserved SQL words through
  def self.strip_sql_reserved_words(search_string)
    if RESERVED_SQL_WORDS.find { |rw| rw.include?(search_string.upcase) }
      ''
    else
      search_string
    end
  end

  # enforce some validation rules on user input
  # 1. remove all accents (transliterate)
  # 2. tokenize string in words
  # 3. remove any character that is not a letter
  # 4. remove any reserved sql words
  # 5. remove any blank values
  def self.sanitize_q(q_string)
    raise StandardError, 'q is not a string' unless q_string.is_a? String

    PragmaticTokenizer::Tokenizer.new({
                                        language: :fr,
                                        punctuation: :none,          # Removes all punctuation from the result.
                                        numbers: :none,              # Removes all tokens that include a number from the result
                                        remove_emoji: true,          # Removes any token that contains an emoji.
                                        remove_urls: true,           # Removes any token that contains a URL.
                                        clean: true,                 # Removes tokens consisting of only hypens, underscores,
                                        # or periods as well as some special characters (®, ©, ™).
                                        # Also removes long tokens or tokens with a backslash.
                                        hashtags: :keep_and_clean,   # Removes the hashtag (#) prefix from the token.
                                        mentions: :keep_and_clean,   # Removes the mention (@) prefix from the token.
                                        classic_filter: true,        # Removes dots from acronyms and 's from the end of tokens.
                                        minimum_length: 2            # The minimum number of characters a token should be.
                                      })
                                 .tokenize(I18n.transliterate(q_string))
                                 .map { |word| Search.keep_only_letters(word) }
                                 .flatten
                                 .map { |word| Search.strip_sql_reserved_words(word) }
                                 .reject(&:blank?)
  end

  def self.key_for(*words)
    words.join('-')
  end
end
